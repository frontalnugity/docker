version: "3.7"

networks:
  elastic:
    driver: bridge

services:

  mysql:
    image: mysql:latest
    container_name: mysql
    working_dir: /application
    volumes:
      - ${DOCKER_STORAGE_PATH}/database:/var/lib/mysql
      - ..:/application
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - elastic

  webserver:
    image: nginx:alpine
    container_name: nginx
    working_dir: /application
    volumes:
        - ..:/application
        - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
        - ${DOCKER_STORAGE_PATH}/logs/nginx:/var/log/nginx/
        - ./nginx/nginx.conf:/etc/nginx/nginx.conf
        - ./certbot/conf:/etc/letsencrypt
        - ./certbot/www:/var/www/certbot

    ports:
     - "${APP_PORT}:80"
     - "${APP_SSL_PORT}:443"
    restart: unless-stopped
    command: /bin/sh -c "while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g 'daemon off;'" # ðŸ’¡
    networks:
      - elastic
    
  
  certbot:
    container_name: certbot
    image: certbot/certbot
    networks:
      - nginx_net
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    restart: unless-stopped
    entrypoint: /bin/sh -c "trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;" # ðŸ’¡
    depends_on:
      - nginx      

  php-fpm:
    build: ./php-fpm
    container_name: php-server
    working_dir: /application
    volumes:
      - ..:/application
      - ./php-fpm/php-ini-overrides.ini:/etc/php/7.4/fpm/conf.d/99-overrides.ini
    networks:
      - elastic

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.2
    container_name: ${ELASTICSEARCH_HOSTNAME}
    hostname: ${ELASTICSEARCH_HOSTNAME}
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.initial_master_nodes=elasticsearch
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - ${ELASTICSEARCH_PORT}:9200
    networks:
      - elastic
          
  kibana:
    image: docker.elastic.co/kibana/kibana:7.5.2
    container_name: ${KIBANA_HOSTNAME}
    hostname: ${KIBANA_HOSTNAME}
    ports:
    environment:
      ELASTICSEARCH_URL: http://${ELASTICSEARCH_HOSTNAME}:${ELASTICSEARCH_PORT}
      ELASTICSEARCH_HOSTS: http://${ELASTICSEARCH_HOSTNAME}:${ELASTICSEARCH_PORT}
    ports:
      - ${KIBANA_PORT}:5601
    networks:
      - elastic
 
  traefik:
    image: "traefik:v2.1"
    container_name: ${TRAEFIK_HOSTNAME}
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

    
  # mailcatcher:
  #   image: jeanberu/mailcatcher
  #   container_name: mailcatcher
  #   restart: always
  #   ports:
  #     - "1025:1025"
  #     - "1080:1080"


